{"version":3,"file":"static/js/187.1681418c.chunk.js","mappings":"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","sources":["components/API/apiServices.js","components/Loader/Loader.jsx","pages/Film/Film.styled.jsx","pages/Film/FilmInfo.jsx"],"sourcesContent":["import axios from \"axios\";\n\n\nconst API_KEY = '152aa9c1fb200c1c42a40b69b3af0ad5';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3'\n\n\nexport const getMovies = async () => {\n    const {data} = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n    return data;\n}\n\n\nexport const getFilmInfo = async (id) => {\n    const {data} = await axios.get(`/movie/${id}?api_key=${API_KEY}&language=en-US`);\n    return data;\n}\n\nexport const getFilmCast = async (id) => {\n    const { data } = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n    return data;\n};\n\nexport const getFilmReviews = async (id) => {\n    const data = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`);\n    return data;\n}\n\nexport const getSearchFilm = async (query) => {\n    const data = await axios.get(`/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`);\n    return data;\n}\n\n\n\n\n","import { BallTriangle } from 'react-loader-spinner';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\n\n\nexport default function Loader() {\n    return (\n        <LoaderWraper>\n            <BallTriangle color=\"#00BFFF\" height={80} width={80} />\n        </LoaderWraper>\n    )\n}\n\n\nconst LoaderWraper = styled.div`\n display: flex;\n  justify-content: center;\n`","import styled from '@emotion/styled';\nimport { NavLink } from \"react-router-dom\";\n\nexport const FilmContainer =styled.div`\n    display: flex;\n`\n\nexport const FilmInformation = styled.div`\nmargin: 15px;\n    max-width: 500px;\n    left: 10px\n` \n\nexport const Link = styled(NavLink)`\n  padding: 8px 16px;\n  border-radius: 4px;\n  text-decoration: none;\n  color: black;\n  font-weight: 500;\n\n  &.active {\n    color: white;\n    background-color: orangered;\n  }\n`;\n\nexport const Button = styled.button`\npadding: 8px 16px;\nbackground-color: orangered;\n  border-radius: 4px;\n  border: none;\n  text-decoration: none;\n  color: white;\n  font-weight: 500;\n`\n\n\n","import { useEffect, useState } from \"react\";\nimport { getFilmInfo } from \"components/API/apiServices\";\nimport Loader from \"components/Loader/Loader\";\nimport { Outlet, useNavigate, useLocation, useParams } from \"react-router-dom\";\nimport DefaultImage from '../../image/no-image.webp';\nimport { FilmContainer, FilmInformation, Link, Button } from \"./Film.styled\";\n\n\nconst FilmInfo = () => {\n    const [state, setState] = useState({\n        film: {},\n        loading: false,\n        error: null,\n    });\n\n    const { id } = useParams();\n    const location = useLocation();\n    const from  = location.state?.from || '/movies';\n    const navigate = useNavigate();\n    const goBack = () => navigate(from);\n\n    useEffect(() => {\n        const getFilms = async () => {\n            try {\n                setState(prevState => ({\n                    ...prevState,\n                    loading: true,\n                    error: null,\n                }));\n                \n                const results = await getFilmInfo(id);\n                setState(prevState => {\n                    return {\n                        ...prevState,\n                        film: results,\n                        loading: false,\n                        error: null,\n                    }\n                })\n            } catch (error) {\n                setState(prevState => ({\n                    ...prevState,\n                    error,\n                }));\n            };\n        };\n        getFilms();\n    }, [id]);\n\n    const { loading, error } = state;\n    const { title, vote_avarage, tagline, genres, poster_path, overview } = state.film;\n\n\n    let genresFilm = []\n    for (const key in genres) {\n        const genre = genres[key];\n        genresFilm.push(genre.name)\n    };\n\n    return (\n        <FilmContainer>\n             {loading && <Loader/>}\n            {error && <p>Error</p>}\n            {poster_path ? (<img src={`https://image.tmdb.org/t/p/w300/${poster_path}`} alt={title} />) : (<img src={DefaultImage} alt=\"\" width='90' height='135' />)}\n            <FilmInformation>\n                <Button type=\"button\" onClick={goBack}>Go back</Button>\n                <h2>{title}</h2>\n                <p>{tagline}</p>\n                <p>{vote_avarage}</p>\n                <p>{overview}</p>\n                <p>{genresFilm.join(', ')}</p>\n                <Link state={{from}} to='cast'>Cast</Link>\n                <Link state={{from}} to='reviews'>Reviews</Link>\n                <Outlet />\n            </FilmInformation>      \n        </FilmContainer>\n    );\n};\n\nexport default FilmInfo;"],"names":["API_KEY","axios","getMovies","data","getFilmInfo","id","getFilmCast","getFilmReviews","getSearchFilm","query","Loader","LoaderWraper","color","height","width","styled","FilmContainer","FilmInformation","Link","NavLink","Button","useState","film","loading","error","state","setState","useParams","from","useLocation","navigate","useNavigate","useEffect","getFilms","prevState","results","title","vote_avarage","tagline","genres","poster_path","overview","genresFilm","key","genre","push","name","src","alt","DefaultImage","type","onClick","join","to"],"sourceRoot":""}